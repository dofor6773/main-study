========================
day1-2 웹 개발 시작하기
========================
 
========================
  웹 개발을위해 공부해야 할 기술
========================
기본 영역
  * HTML: 웹 페이지의 기본 구조를 만드는 언어
  * CSS: 스타일과 레이아웃을 지정하여 페이지 디자인 언어
  * 자바스크립트: 웹 페이지에 동적 기능을 추가하는 언어
  * 깃/깃허브: 버전 관리를 위한 도구로, 협업 개발에 필수

프론트엔드 영역
  * jQuery, D3.js, 부트스트랩: 웹 요소, 조작, 데이터 시각화, 반응형 디자인을 위한
                                    라이브러리와 프레임워크
  * React, Angular, Vue.js: 사용자 인터페이스를 구축하고, 복잡한 웹 애플리케이션
                                 개발을 쉽게 해주는 현대적인 프레임워크

백엔드 영역
  * 리눅스 서버, 네트워크, 데이터베이스: 서버 운영 및 데이터 저장에 필요한 기술
  * 파이썬, 자바, PHP, .NET: 애플리케이션의 서버 로직을 구현하는 언어
  * Node.js, Spring Boot, Django: 서버 구축과 데이터 처리를 효율적으로 
                                          수행하는 프레임워크

웹 개발 학습 경로
HTML & CSS  -> JavaScript -> Git/Github -> 프론트엔드 프레임워크
백엔드 -> 데이터베이스 -> API -> 백엔드 프레임워크 ->
클라우드와 배포 -> 웹 보안

========================
           웹 개발의 기본
========================
웹 문서의 뼈대를 만드는 HTML 
  * 웹 페이지의 구조를 정의하는 마크업 언어
  * 텍스트, 이미지, 링크 등 다양한 요소를 배치하고 구성함
  * 예를 들어 제목, 문단, 목록 등을 HTML 태그를 통해 표현할 수 있음
웹 문서를 꾸미는 CSS 
  * 웹 페이지의 시각적 표현을 담당하는 스타일 시트 언어
  * 글꼴, 색상, 레이아웃 등을 설정하여 웹 페이지의 디자인과 레이아웃을 조정함
  * 다양한 디바이스에 맞는 반응형 웹 디자인을 만들기 위해 필수적으로 학습해야 함
사용자 동작에 반응하는 자바스크립트 
  * 웹 페이지에 동적인 기능을 추가하는 프로그래밍 언어
  * 사용자와의 상호작용, 애니메이션, 데이터 검증 등 다양한 기능을 구현할 수 있음
  * 자바스크립트를 알고 있다면 새로운 프레임워크를 배우기 쉬움
코드를 관리해 주는 유용한 서비스 Git/GitHub
  * Git: 코드에서 수정한 내용을 계속 저장하고 관리해 주는도구
  * GitHub: 온라인에서 깃을 사용할 수 있게 만든 서비스
  * 깃과 깃허브는 파일 이름은 그대로 사용하면 서 수정 내용만 따로 관리해 주므로
    협업 작업을 할 때도 편리하기에 필수적으로 학습해야함

========================
     프론트엔드 개발을 위한 기술
========================
프레임워크: 프로그램을 만들 때 필요한 여러 기능을 쉽게 구현하도록 도와주는 도구
               ex) 웹 프레임워크는 로그인이나 댓글처럼 자주 쓰는 기능을 제공해
                   개발자가 웹 사이트를 쉽게 만들도록 도와줌
  * 라이브러리나 프레임워크를 사용하지 않고 자바스크립트만으로 프로그램을
    끝까지 직접 개발하는 것을 '바닐라 자바스크립트'라고 함

라이브러리와 프레임워크의 차이점
  * 라이브러리: 특정 기능을 수행하기 위한 함수나 메서드의 모음으로,
                   개발자가 필요한 기능을 호출하여 사용하는 도구
    - 특징:
      > 제어 흐름: 개발자가 주도권을 가지고 라이브러리를 호출하여 사용함
      > 유연성: 필요한 기능만 선택적으로 사용할 수 있다
         ex) Java의 java.util 패키지, python의 math 모듈
                
  * 프레임워크: 애플리케이션 개발을 위한 뼈대나 구조를 제공하는 도구로,
                   프레임워크 자체가 코드의 흐름을 제어하는 역할
    - 특징:
      > 제어 흐름: 프레임워크가 주도권을 가지고 개발자가 작성한 코드를 호출함
                      (이것을 '제어의 역전'이라고 한다)
      > 규칙과 구조: 정해진 규칙과 구조를 따르며, 일관된 개발 방식을 제공함
         ex) Java의 Spring, Python의 Django 
  * 차이점:
    - 제어흐름: 라이브러리는 개발자가 호출하지만, 프레임워크는 프레임워크가
                  개발자의 코드를 호출한다
    - 유연성: 라이브러리는 필요에 따라 선택적으로 사용 가능하지만, 프레임워크는
                정해진 구조와 규칙을 따른다
  * 이러한 차이로 인해, 라이브러리는 특정 기능을 구현할 때 사용하고, 
    프레임워크는 애플리케이션의 전체적인 구조와 흐름을 관리할 때 사용된다
     

프론트엔드의 라이브러리와 프레임워크
  * 제이쿼리 (jQuery) 
    - 특징: DOM을 활용해 웹 요소를 조작하기 쉽고 사용하기 편리한
             라이브러리의 도구이다. 최근에는 웹 애플리케이션 개발에
             적합한 다른 라이브러리나 프레임워크에 자리를 내주고 있다
             (관련 사이트: jquery.com)
  * D3.js
    - 특징: 웹 브라우저에서 실시간으로 변하는 정보를 시각적으로 표시하기에
             적합한 라이브러리 도구이다. 데이터 시각화 해주는 자바스크립트
             라이브러리는 D3.js 외에도 라파엘, Three.js등이 있다
             (관련 사이트: d3js.org)
  * 부트스트랩 (Bootstrap)
    - 특징: 웹 사이트 디자인을 쉽게 만들어 주는 라이브러리 도구이다
             CSS로 pc, 태블릿 pc, 휴대 전화 등에서 동작하는 반응형 디자인을
             만들 수 있게 해준다
             (관련 사이트: getbootstrap.com)
  * 리액트 (React)
    - 특징: 페이스북처럼 한 화면에서 모든 내용을 볼 수 있는 사이트를
             SPA라고 한다. SPA나 복잡한 사이트를 개발할 때 프레임워크를
             사용한다. 이때 가장 많이 사용하는 프레임워크가 페이스북에서
             개발한 리액트이다
             (관련 사이트: ko.legacy.reactjs.org)
  * 앵귤러 (Angular)
    - 특징: 구글에서 개발한 언어로 웹 애플리케이션을 제작하는 프레임워크이다
             프로젝트 성격에 따라 리액트 앵귤러 중에서 선택해 사용한다
             (관련 사이트: angular.dev)
  * 뷰(Vue)
    - 특징: 웹 애플리케이션에서 사용자 인터페이스를 만드는 프레임워크이다
             화면에 보이는 부분에만 초점을 맞추기 때문에 다른 라이브러리나
             프레임워크와 함께 사용할 수 있다
             (vuejs.org)

========================
       백엔드 개발을 위한 기술
========================
백엔드의 라이브러리와 프레임워크
  * 노드제이에스(Node.js), 익스프레스(Express)
    - 특징: 프론트엔드 개발을 이미 해본 경험이 있거나 자바스크립트에 익숙다면
             노드제이에스로 실력을 발휘해 백엔드 개발에 사용할 수 있다.
             노드제이에스는 서버에서 자바스크립트를 실행할 수 있는 환경,
             즉 플랫폼이라고 생각하면 된다, 그래서 자바스크립트만 익숙하면
             웹 개발의 전체를 다룰 수 있다. 노드제이에스에서 주로 사용하는
             웹 개발 프레임워크는 익스프레스이다
             (관련 사이트: nodejs.org/ko | expressjs.com)
  * 자바(Java), 스프링(Spring)
    - 특징: 자바는 오랫동안 백엔드 개발용으로 사랑받는 언어이고,
             그만큼 관련 커뮤니티나 오픈 코드가 많다. 자바를 사용하면
             안드로이드 앱을 개발할 수도 있고, 셋톱 박스나 하드웨어용
             애플리케이션을 만들 수도 있다. 자바의 웹 개발 프레임워크로는
             스프링을 사용한다
             (관련 사이트: oracle.com/kr/java/ | spring.io)
  * 파이썬(Python), 장고(Django)
    - 특징: 파이썬은 배우기도, 사용하기도 쉬워서 개발 입문자에게
             추천하는 언어이다. 특히 데이터를 많이 다뤄야 하는 분야에서는
             파이썬이 훨씬 유리하다. 백엔드 개발을 할 때 파이썬의 프레임워크로는
             장고를 사용한다
             (관련 사이트: python.org | djangoproject.com)
  * C#, 닷넷(ASP.NET Core)
    - 특징: C#은 마이크로포스트에서 개발한 언어로, 문법이 간결하고 강력한
             기능을 제공한다. 특히 대규모 애플리케이션 개발에 적합하며,
             Windows 환경에서의 개발에 강점을 가지고 있다. C#의 프레임워크로는
             ASP.NET Core을 사용한다
             (관련 사이트: learn.microsoft.com/ko-kr/dotnet/csharp |                                                    dotnet.microsoft.com/ko-kr)
  * PHP, 라라벨(Laravel)
    - 특징: PHP는 백엔드 개발에서 오랫동안 사용해 온 개발 언어이다. 
             이전 버전은 개인 웹 사이트에서 주로 사용했지만 PHP 7 버전부터는 
             백엔드 개발을 위한 프레임 워크로 탈바꿈했다. 
             PHP의 대표적인 웹 프레임워크는 라라벨을 사용한다
             (관련 사이트: php.net | laravel.com)
  * 루비(Ruby), 루비 온 레일즈(Ruby on rails)
    - 특징: 루비는 간결하고 읽기 쉬운 문법을 가진 언어로, 코드 가독성이 높고
             직관적이다. 순수 객체 지향 언어로서 모든 것이 객체로 취급되며,
             개발 생산성을 높이기 위해 다양한 내장 메서드를 제공한다.
             Ruby의 대표적인 웹 프레임워크로는 루비 온 레일즈을 사용한다
             (관련 사이트: ruby-lang.org/ko | rubyonrails.org)
  * 고(Go), 진(gin)
    - 특징: Go는 구글에서 개발한 오픈 소스 프로그래밍 언어로, 간결한 문법과
             높은 성능, 뛰어난 병행 처리 지원이 특징이다. Go는 컴파일러 기반 언어로
             빠른 실행 속도를 자랑하며, 특히 대규모 시스템이나
             네이티브 애플리케이션 개발에 적합하다. Go의 대표적인 웹 프레임워크는
             Gin을 사용한다
             (관련 사이트: go.dev | gin-gonic.com
  * 코틀린(Kotlin), Ktor
    - 특징: 코틀린은 JetBrains에서 개발한 현대적인 프로그래밍 언어로,
             간결한 문법과 높은 안정성, 그리고 Java와의 높은 호환성을 자랑한다.
             코틀린은 특히 안드로이드 개발에서 널리 사용되며, 서버 측 개발에서도
             활발히 활용되고 있다. 코틀린의 웹 프레임워크로는 Ktor을 사용한다
             (관련 사이트: kotlinlang.org | ktor.io