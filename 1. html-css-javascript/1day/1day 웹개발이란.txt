========================
day1 학습내용
========================

========================
 웹 개발이란
========================
웹 개발: 웹 사이트에 어울리는 여러 장치와 기능을 만드는 것
  - 단순히 웹 사이트 뿐만 아니라 애플리케이션, 웹 플랫폼 모두 아우르는 개념이다

정적 웹 사이트: 개인의 포트폴리오 사이트나 기업 홍보 사이트처럼 방문자에게
단순 정보 전달하는 목적의 추가적인 데이터베이스나 서버의 복잡한 기능이 
필요하지 않는 사이트
  - ex) 회사 소개 페이지, 포트폴리오 웹사이트, 뉴스 사이트

동적 웹 사이트: 인스타그램이나 쿠팡과 같은 사용자의 요청에 따라 실시간으로 
콘텐츠가 바뀌며, 데이터베이스와 서버의 상호작용이 필요한 사이트
  - ex) SNS 플랫폼(페이스북, 인스타그램), 온라인 쇼핑몰, 예약 시스템, 배달 주문

- 두가지의 웹 사이트처럼 화면에 보이는 겉모습을 만드는 것이 전부가 아니다
   웹 사이트에서 사용자에게 제공할 기능과 서비스까지 모두 담아야 한다
   그래서 웹 개발에는 한 두가지 기술만이 아니라 여러가지 기술들이 사용된다

========================
 웹에서 웹 표준이 중요한 이유
========================
디지털 트랜스폼: 오프라인에 있는 모든 정보와 서비스를 온라인으로 옮기는 작업
  - 디지털 트랜스폼 환경에서는 웹을 다양한 스마트 기기에 개발하는 것이 중요함
  - 스마트 기기마다 내장된 브라우저로 웹에 접속해 화면을 보고 클릭도 할수 있어       야함
  - pc와 스마트 TV, 자율 주행차의 브라우저는 서로 겉 모습이 조금씩 다르지만 
    실제 내부에서 동작하는 방법은 같음 

웹 표준: 모든 스마트 기기에서 지켜야할 표준
  - 웹 개발을 위한 표준 언어: HTML, CSS, 자바스크립트

========================
 서버 vs 클라이언트
========================
클라이언트: 서버에 서비스를 처리해 달라 요청하는 역할
(좁은 의미로 브라우저)
  * 주요 역할: 
    - 서버에 데이터 요청 전송
    - 사용자가 상호작용할 수 있는 UI(사용자 인터페이스)를 표시
    - 서버로부터 받은 응답 데이터를 사용자에게 보여줌 
    - ex) 웹 브라우저(Chrome), 모바일 앱, 데스크톱 애플리케이션
  * 특징:  
    - 사용자 중심: 사용자와 직접 상호작용하며 인터페이스를 제공
    - 가벼운 처리: 보통 서버로부터 받은 데이터와 화면을 렌더링하는 작업만 수행
    - 보안 제한: 클라이언트는 보안상 이유로 중요한 데이터나 로직을 서버에서 처리                    하는 경우가 많음

서버: 클라이언트의 요청을 받아들이고, 작업을 처리해주는 역할
  * 주요 역할: 
    - 클라이언트 요청 처리 및 응답 준비
    - 데이터베이스와 통신하여 데이터를 검색, 저장, 수정
    - 애플리케이션 로직 처리(인증, 권한 부여 등)
    - ex) 웹 서버(Apache, Nginx), 애플리케이션 서버(Node.js, Django, Spring Boot),       데이터베이스 서버(MySQL, PostgreSQL) 등
  * 특징:  
    - 중앙 집중: 여러 클라이언트로부터의 요청을 관리하고 응답
    - 복잡한 처리: 데이터 저장, 로직 처리, 인증 등 클라이언트의 요청을 기반으로                          다양한 작업 수행
    - 보안: 중요한 로직과 데이터를 서버에서 관리하여 보안을 강화함
             서버와 클라이언트의 상호작용

서버와 클라이언트의 상호작용 과정
  1. 요청(Request): 사용자가 웹사이트의 URL을 입력하거나 특정 기능을 요청하면,
                        클라이언트가 HTTP 요청을 서버로 보낸다 
  2. 처리(Processing): 서버는 요청을 받고 필요한 데이터를 조회하거나 특정 기능을
                           수행한다. 이 과정에서 서버는 데이터베이스와 상호작용하거                           나 서비스를 처리할 수 있다
  3. 응답(Response): 서버는 요청을 처리한 결과를 클라이언트로 다시 전송을 한다
  4. 랜더링(Rendering): 클라이언트는 서버로부터 받은 데이터를 화면에 표시하여                              사용자에게 결과를 보여준다. 

클라이언트-서버 모델: 클라이언트가 서버에 요청을 보내면, 서버는 요청을 처리하고                             응답을 보여주는 방식
  - 통신 프로토콜: 클라이언트와 서버는 HTTP 등의 프로토콜을 통해 데이터를 주고                        받음
                       ex) 사용자가 브라우저(클라이언트)에서 웹사이트 주소를 입력
	           하면, 서버는 해당 요청을 받고 페이지 데이터를 응답하여 
                       화면에 표시함

========================
프론트엔드 개발 vs 백엔드 개발
========================
프론트엔드: 사용자 앞에 보이는 영역으로 웹사이트의 시각적 요소와 인터페이스 
               구현하는 담당
  * 주요 역할: 
    - 웹페이지의 구조와 디자인 구현
    - 사용자와의 상호작용 처리
    - 반응형 웹 디자인을 통해 다양한 디바이스에 최적화된 화면 제공
  * 사용 기술: 
    - HTML: 웹페이지의 구조를 정의
    - CSS: 웹페이지의 스타일과 레이아웃을 설정
    - JavaScript: 웹페이지에 동적인 기능을 추가
    - 프레임워크 및 라이브러리: React, Angluar, Vue.js
  * 특징: 
    - 빠르게 변화하는 기술 트렌드에 대한 지속적인 학습 필요
    - 디자인 감각과 사용자 경험에 대한 이해 중요

백엔드: 사용자 뒤에 있어서 보이지 않는 영역으로 웹사이트의 데이터 처리, 서비스,            데이터베이스 관리 등 담당
  * 주요 역할: 
    - 데이터베이스 설계 및 관리
    - 서버 로직 구현
    - API 개발 및 관리
    - 보안 및 인증 처리
  * 사용 기술: 
    - 프로그래밍 언어: Java, C#, Python, PHP
    - 프레임워크: Spring Boot, ASP.NET Core, Django
    - 데이터베이스: MySQL, PostgreSQL, MongoDB
  * 특징: 
    - 시스템의 안전성과 효율성을 위한 논리적 사고 필요
    - 보안에 대한 깊은 이해 중요

========================
IP 주소와 도메인, DNS 서버
========================
IP 주소: 인터넷에 연결된 장치(컴퓨터, 스마트폰)가 가지는 고유한 주소
  - IPv4: 4개의 숫자 조합으로 구분하는 IP 주소(웹 사이트)
    ex) 192.168.0.1
    -- 32비트 주소 체계로, 약 43억 개의 고유 주소를 제공
    
    ex) 192.168.0.1
  - IPv6: 8개 숫자 조합으로로 구분하는 IP 주소(모바일)
    ex) 2001:0db8, 0000
    -- 128비트 주소 체계로, 휠씬 더 많은 주소를 제공

도메인(Domain): 사용자가 접근할 수 있도록 Ip 주소에 붙여진 텍스트 형태의 주소
  - 최상위 도메인: 도메인의 가장 오른쪽 부분 ex) .com, .org .net
  - 2차 도메인: 최상위 도메인 앞에 위치하는, example.com에서 'example'이 
                   2차 도메인에 해당
  - 서브도메인: 추가로 도메인을 세분화한 부분으로, ex) www.example.com에서
                   www가 서브 도메인에 해당

DNS 서버
========================
HTTP 프로토콜과 HTTPS 프로토콜
========================


========================
웹 접근성
========================
웹 접근성: 나이에 상관없이, 장애에 상관없이 모든 사용자가 웹에 접근할 수 
             있어야 한다

========================
웹 개발의 기본
========================
웹 문서의 뼈대를 만드는 HTML 
  - 웹 페이지의 구조를 정의하는 마크업 언어
  - 텍스트, 이미지, 링크 등 다양한 요소를 배치하고 구성함
  - 예를 들어 제목, 문단, 목록 등을 HTML 태그를 통해 표현할 수 있음
웹 문서를 꾸미는 CSS 
  - 웹 페이지의 시각적 표현을 담당하는 스타일 시트 언어
  - 글꼴, 색상, 레이아웃 등을 설정하여 웹 페이지의 디자인과 레이아웃을 조정함
  - 사용자에게 일관되고 아름다운 인터페이스를 제공함
사용자 동작에 반응하는 자바스크립트 
  - 웹 페이지에 동적인 기능을 추가하는 프로그래밍 언어
  - 사용자와의 상호작용, 애니메이션, 데이터 검증 등 다양한 기능을 구현할 수 있음
  - 웹 페이지는 정적인 정보 제공을 넘어, 사용자와의 실시간 상호작용이 가능해짐
  - 웹 개발 학습 경로

HTML& CSS 학습 -> JavaScript -> 프론트엔드 프레임워크 -> 백엔드 -> 백엔드 프레임워크
