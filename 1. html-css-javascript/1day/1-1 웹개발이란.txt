========================
day1-1 웹 개발이란
========================
 
========================
              웹 개발이란
========================
웹 개발: 웹 사이트에 어울리는 여러 장치와 기능을 만드는 것
  * 단순히 웹 사이트 뿐만 아니라 애플리케이션, 웹 플랫폼 모두 아우르는 개념

정적 웹 사이트: 개인의 포트폴리오 사이트나 기업 홍보 사이트처럼 방문자에게
단순 정보 전달하는 목적의 추가적인 데이터베이스나 서버의 복잡한 기능이 
필요하지 않는 사이트
  * ex) 회사 소개 페이지, 포트폴리오 웹사이트, 뉴스 사이트

동적 웹 사이트: 인스타그램이나 쿠팡과 같은 사용자의 요청에 따라 실시간으로 
콘텐츠가 바뀌며, 데이터베이스와 서버의 상호작용이 필요한 사이트
  * ex) SNS 플랫폼(페이스북, 인스타그램), 온라인 쇼핑몰, 예약 시스템, 배달 주문

두가지의 웹 사이트처럼 화면에 보이는 겉모습을 만드는 것이 전부가 아니다
웹 사이트에서 사용자에게 제공할 기능과 서비스까지 모두 담아야 한다
그래서 웹 개발에는 한 두가지 기술만이 아니라 여러가지 기술들이 사용된다

========================
    웹에서 웹 표준이 중요한 이유
========================
디지털 트랜스폼: 오프라인에 있는 모든 정보와 서비스를 온라인으로 옮기는 작업
  * 디지털 트랜스폼 환경에서는 웹을 다양한 스마트 기기에 개발하는 것이 중요함
  * 스마트 기기마다 내장된 브라우저로 웹에 접속해 화면을 보고 클릭도 
    할수 있어야함
  * pc와 스마트 TV, 자율 주행차의 브라우저는 서로 겉 모습이 조금씩 다르지만 
    실제 내부에서 동작하는 방법은 같음 

웹 표준: 모든 스마트 기기에서 지켜야할 표준
  * 웹 개발을 위한 표준 언어: HTML, CSS, 자바스크립트

========================
         서버 vs 클라이언트
========================
클라이언트: 서버에 서비스를 처리해 달라 요청하는 역할
(좁은 의미로 브라우저)
  * 주요 역할: 
    - 서버에 데이터 요청 전송
    - 사용자가 상호작용할 수 있는 UI(사용자 인터페이스)를 표시
    - 서버로부터 받은 응답 데이터를 사용자에게 보여줌 
    - ex) 웹 브라우저(Chrome), 모바일 앱, 데스크톱 애플리케이션
  * 특징:  
    - 사용자 중심: 사용자와 직접 상호작용하며 인터페이스를 제공
    - 가벼운 처리: 보통 서버로부터 받은 데이터와 화면을 렌더링하는 작업만 수행
    - 보안 제한: 클라이언트는 보안상 이유로 중요한 데이터나 로직을 서버에서 처리                    하는 경우가 많음

서버: 클라이언트의 요청을 받아들이고, 작업을 처리해주는 역할
  * 주요 역할: 
    - 클라이언트 요청 처리 및 응답 준비
    - 데이터베이스와 통신하여 데이터를 검색, 저장, 수정
    - 애플리케이션 로직 처리(인증, 권한 부여 등)
    - ex) 웹 서버(Apache, Nginx), 애플리케이션 서버(Node.js, Django, Spring Boot),       데이터베이스 서버(MySQL, PostgreSQL) 등
  * 특징:  
    - 중앙 집중: 여러 클라이언트로부터의 요청을 관리하고 응답
    - 복잡한 처리: 데이터 저장, 로직 처리, 인증 등 클라이언트의 요청을 기반으로                          다양한 작업 수행
    - 보안: 중요한 로직과 데이터를 서버에서 관리하여 보안을 강화함
             서버와 클라이언트의 상호작용

서버와 클라이언트의 상호작용 과정
  1. 요청(Request): 사용자가 웹사이트의 URL을 입력하거나 특정 기능을 요청하면,
                        클라이언트가 HTTP 요청을 서버로 보낸다 
  2. 처리(Processing): 서버는 요청을 받고 필요한 데이터를 조회하거나 특정 기능을
                           수행한다. 이 과정에서 서버는 데이터베이스와 상호작용하거                           나 서비스를 처리할 수 있다
  3. 응답(Response): 서버는 요청을 처리한 결과를 클라이언트로 다시 전송을 한다
  4. 랜더링(Rendering): 클라이언트는 서버로부터 받은 데이터를 화면에 표시하여                              사용자에게 결과를 보여준다. 

클라이언트-서버 모델: 클라이언트가 서버에 요청을 보내면, 서버는 요청을 처리하고                             응답을 보여주는 방식
  * 통신 프로토콜: 클라이언트와 서버는 HTTP 등의 프로토콜을 통해 
                       데이터를 주고 받음
                       ex) 사용자가 브라우저(클라이언트)에서 웹사이트 주소를 입력
	               하면, 서버는 해당 요청을 받고 페이지 데이터를 응답하여 
                           화면에 표시함

========================
프론트엔드 개발 vs 백엔드 개발
========================
프론트엔드: 사용자 앞에 보이는 영역으로 웹사이트의 시각적 요소와 인터페이스 
               구현하는 담당
  * 주요 역할: 
    - 웹페이지의 구조와 디자인 구현
    - 사용자와의 상호작용 처리
    - 반응형 웹 디자인을 통해 다양한 디바이스에 최적화된 화면 제공
  * 사용 기술: 
    - HTML: 웹페이지의 구조를 정의
    - CSS: 웹페이지의 스타일과 레이아웃을 설정
    - JavaScript: 웹페이지에 동적인 기능을 추가
    - 프레임워크 및 라이브러리: React, Angluar, Vue.js
  * 특징: 
    - 빠르게 변화하는 기술 트렌드에 대한 지속적인 학습 필요
    - 디자인 감각과 사용자 경험에 대한 이해 중요

백엔드: 사용자 뒤에 있어서 보이지 않는 영역으로 웹사이트의 데이터 처리, 서비스,            데이터베이스 관리 등 담당
  * 주요 역할: 
    - 데이터베이스 설계 및 관리
    - 서버 로직 구현
    - API 개발 및 관리
    - 보안 및 인증 처리
  * 사용 기술: 
    - 프로그래밍 언어: Java, C#, Python, PHP
    - 프레임워크: Spring Boot, ASP.NET Core, Django
    - 데이터베이스: MySQL, PostgreSQL, MongoDB
  * 특징: 
    - 시스템의 안전성과 효율성을 위한 논리적 사고 필요
    - 보안에 대한 깊은 이해 중요

========================
     IP 주소와 도메인, DNS 서버
========================
IP 주소: 인터넷에 연결된 장치(컴퓨터, 스마트폰)가 가지는 고유한 주소
  * IPv4: 4개의 숫자 조합으로 구분하는 IP 주소(웹 사이트)
    ex) 192.168.0.1
    - 32비트 주소 체계로, 약 43억 개의 고유 주소를 제공
  * IPv6: 8개 숫자 조합으로로 구분하는 IP 주소(모바일)
    ex) 2001:0db8, 0000
    - 128비트 주소 체계로, 휠씬 더 많은 주소를 제공

도메인(Domain): 사용자가 접근할 수 있도록 IP 주소에 붙여진 텍스트 형태의 주소
  * 최상위 도메인: 도메인의 가장 오른쪽 부분 ex) .com, .org .net
  * 2차 도메인: 최상위 도메인 앞에 위치하는, google.com에서 'goole'이 
                   2차 도메인에 해당
  * 서브도메인: 추가로 도메인을 세분화한 부분으로, ex) www.google.com에서
                   www가 서브 도메인에 해당

DNS 서버: 도메인 이름과 IP주소 간의 변환을 담당하는 서버
  * DNS 조회: 사용자가 도메인 주소를 입력하면, DNS 서버가 해당 도메인에 연결된                   IP주소를 찾아서 해당 서버에 접속할 수 있도록 해줌
    1. 사용자가 www.goole.com을 입력하면, 브라우저는 
       먼저 로컬 캐시(이전에 방문한 웹사이트의 IP주소를 기억하는 입시 저장소)에서
       IP 주소를 찾음
    2. 로컬 캐시에 IP 주소가 없다면, ISP(인터넷 서비스 제공자)의 DNS 서버에 
       해당 도메인의 IP주소를 조회함
    3. ISP의 DNS 서버도 해당 IP 주소를 모르면 루트 DNS 서버에 요청을 보내어
       도메인 정보가 어디에 저장되어 있는지 알아냄
    4. 이후 단계적으로 TLD 서버와 권한 있는 DNS 서버를 거쳐 최종적으로
       www.goole.com의 IP주소를 찾아내고, 브라우저에 전달하여
       해당 웹 사이트에 접속하게 한다
  * 계층적으로 구성되어 있으며 각 계층은 특정 도메인에 대한 정보를 관리함
    ex) 최상위 도메인에 대한 정보는 루트 DNS 서버가 관리하며, 그 아래의 계층의
        도메인 정보는 해당 도메인의 권한 있는 DNS 서버가 관리함
  * IP 주소와 DNS 서버의 상호작용
    (예: 사용자가 www.goole.com에 접속하고자 할때)
    1. DNS 서버가 도메인을 기반으로 IP 주소를 조회함
    2. 해당 IP 주소를 브라우저에 전달하며,
    3. 브라우저가 해당 IP 주소를 사용해 웹 서버에 요청을 보내고,
    4. 웹 서버는 브라우저가 요청한 콘텐츠를 접속한다

========================
 HTTP 프로토콜과 HTTPS 프로토콜
========================
포로토콜: 클라이언트하고 서버하고 어떤 식으로 자료를 보내고 받을 수 있는지
            약속해 놓은 것

HTTP 프로토콜: 웹 브라우저를 통해 클라이언트와 서버가 자료를 주고받는 방식
  * 데이터를 암호화하지 않고 평문으로 전송하므로, 중간에 3자가 데이터를
    가로챌 수 있는 보안상의 취약점이 있음
  * 보안이 필요한 정보(로그인 정보, 결제 정보)를 주고받기에는 적합하지 않음
  * 장점: HTTP는 빠르고, 기본적으로 웹 콘텐츠 전송에는 문제없이 사용된다
  * 단점: 데이터가 암호화되지 않아 도청, 중간자 공격 등에 취약하다

HTTPS 프로토콜: HTTP 프로토콜에 암호화를 추가해 보안을 강화하는 것
  * SSL/TSL을 사용하여 데이터를 암호화한다
  * 클라이언트와 서버 간의 통신이 안전하게 이루어지며, 중간에서 데이터를
    가로채더라도 내용을 해독하기 어렵다
  * 서버와 클라이언트가 신뢰할 수 있는 상대임을 증명하는 인증서(SSL 인증서)를
    사용하여 사용자와 서버가 신뢰할 수 있는 상태에서 통신한다
  * 장점: HTTPS는 개인정보 보호와 보안을 강화하여, 금융 거래, 로그인 정보 등
           민감한 데이터 전송에 적합하다
  * 단점: 암호화로 인해 HTTP보다 조금 더 느릴 수 있으며, SSL 인증서 설치 비용이
           발생할 수 있다

HTTP 프로토콜과 HTTPS 프로토콜의 차이점
  * HTTP는 주로 80번 포트를 사용하며 데이터 암호화가 되어 있지 않으며
    인증서가 필요 없으며 URL에 'http://'로 쓰이며 주의 아이콘이 표시된다
  * HTTPS는 주로 443번 포트를 사용하며 SSL/TSL를 통해 암호화하며
    SSL 인증서가 필요하며, URL에 https://'로 쓰이며 자물쇠 아이콘이 표시된다

HTTPS의 중요성
  * 오늘날 HTTP을 쓰는 웹사이트들은 급격히 줄어들고 기본적으로 HTTPS를
    사용하며, 보안이 필수적인 웹 애플리케이션이 많아지고 있는 시대에
    필수적이며 검색 엔진 또한 HTTPS 사이트를 더 신뢰하여 우선적으로
    노출되는 경향이 많기에 HTTP에서 HTTPS로 전환을 권장한다

========================
              웹 접근성
========================
웹 접근성: 나이에 상관없이, 장애에 상관없이 모든 사용자가 
웹에 접근할 수 있어야 한다
  * 정부 웹사이트는 법적 의무에 따라 법적 의무에 따라 접근성이
    높은 웹사이트로 제작됨
    ex) 텍스트 크기를 조정할 수 있고, 화면 읽기 도구가 모든 콘텐츠를 쉽게
        해석할 수 있도록 설계됨
  * 이커머스 사이트에서 키보드로 상품을 검색하고 장바구니에
    추가 할 수 있도록 하여, 마우스를 사용할 수 없는 사용자도 구매를 할 수 있게 함
     

웹 접근성의 주요 원칙 (WCAG 기준)
  1. 인식 가능성: 사용자가 정보를 인식할 수 있어야 함
     ex) 시각 장애인을 위해 이미지에 대체 텍스트를 제공하거나, 청각 장애인을 위해
         동영상에 자막을 추가하는 것이 포함
  2. 운용 가능성: 사용자가 웹사이트의 모든 기능을 사용할 수 있어야 함
     ex) 키보드로만으로도 모든 메뉴를 탐색할 수 있도록 설계하는 것이 해당
  3. 이해 가능성: 콘텐츠와 사용자 인터페이스가 이해할 수 있어야 함
     ex) 복잡한 용어를 피하고 명확한 지침을 제공하는 것이 중요함
  4. 견고성: 다양한 사용자 도구와 호환될 수 있어야 함
     ex) HTML의 태그를 정확히 사용하여 다양한 브라우저, 스크린 리더 등에서도
         콘텐츠가 제대로 표시되도록 함 

웹 접근성의 중요성: 웹은 전 세계 누구나 이용할 수 있어야 한다
  * 법적 준수: [지능정보화기본법]에 따라 공공기관과 민간 기업이 웹 접근성을
                  준수해야 함
  * 모두를 위한 평등한 접근: 웹 접근성은 인터넷에 있는 정보와 서비스에 접근할 수                                      있도록함으로써 평등한 기회를 제공하여 장애 여부와 
                                   상관없이 누구나 이용할수 있는 수단으로 만듬
  * 사용자 만족도 향상: 웹 접근성 개선은 모든 사용자의 웹 경험을 향상시키는
                            결과를 가져옵니다. 명확한 네비게이션 구조, 이해하기
                            쉬운 콘텐츠, 빠른 페이지 로딩 등은 접근성을 높일 뿐만
                            아니라 사용자 만족도도 높임
  
웹 접근성 향상을 위한 실천 방안
  * 대체 텍스트: 이미지에 적절한 대체 텍스트를 제공하여 시각장애인이
                    화면 읽기 도구를 통해 이미지를 이해할 수 있게 한다
  * 키보드 내비게이션: 모든 기능을 키보드만으로도 사용할 수 있도록 하여,
                            마우스를 사용하지 않는 사용자도 사이트를 
                            탐색 할 수 있게 함
  * 명확한 콘텐츠 구조: 제목과 서브타이틀을 사용해 콘텐츠를 구분하고,
                             일관성 있는 네비게이션 구조를 제공해 사용자가
                             페이지를 쉽게 이해하고 탐색할 수 있게 함
  * 명료한 색상 대비: 텍스트와 배경 색상 간의 충분한 대비를 유지하여,
                          색약이나 시력에 문제가 있는 사용자도 내용을 쉽게
                          읽을 수 있도록 함
  * 자막및 대체 자료 제공: 동영상에는 자막을 추가하고 오디오 콘텐츠에는
                                 텍스트 대본을 제공하여 청각장애인도 콘텐츠를
                                 이해할 수 있도록 함

참고 사이트
  * 무인정보단말기UI 플랫폼(https://www.kioskui.or.kr)
  * 널리(https://nuli.navercorp.com)
  * AOA11Y(https://www.youtube.com/@AOA11Y)
